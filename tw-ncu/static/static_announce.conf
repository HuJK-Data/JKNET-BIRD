protocol static {
    route  2a0e:b107:1950::/44 reject;
    route  2a06:a005:210::/44 reject;
    ipv6 {
        import filter {
            ebgp_import(PUB_MYASN, "downstream", 0, prefix_all_v6   , [0]);
            accept;
        };
        export none;
    };
}


protocol static static_sub {
    route  2a0e:b107:1954::/48 unreachable;
    ipv6 {
        import filter {
            ebgp_import(PUB_MYASN, "downstream", 0, prefix_all_v6   , [0]);
            ebgp_import(PUB_MYASN, "downstream", 0, prefix_all_v6   , [0]);
#            bgp_large_community.add((PUB_COMMUNITY,1040,1)); # do not send to non-self upstream
#            bgp_large_community.add((PUB_COMMUNITY,1040,2)); # do not send to non-self peers
#            bgp_large_community.add((PUB_COMMUNITY,1040,3)); # do not send to non-self ixrs
            bgp_large_community.add((PUB_COMMUNITY,101,0));  # allow bgp_local_perf
            bgp_large_community.add((207705,1019,1));        # Do not perform prepend to balance the path_len
            accept;
        };
        export none;
    };
}

protocol static static_lab53 {
    route  2a0e:b107:1954:53::/64 via 2a0e:b107:1954:53::1%eth0;
    ipv6 {
        import filter {
            bgp_large_community.add((PUB_COMMUNITY,1000,0)); # do not send to anyone
            bgp_large_community.add((PUB_COMMUNITY,1,0));    # do not send to ibgp
            bgp_community.add((65535, 65281));# no-export
            accept;
        };
        export none;
    };
}

#protocol static static_tanet {
#    route 2001:288::/32 via 2001:288:3001:59::254;
#    ipv6 {
#        import filter {
#            bgp_local_pref = 300;
#            bgp_large_community.add((PUB_COMMUNITY,201,0));# peer routes
#            bgp_large_community.add((PUB_COMMUNITY,101,0));# allow bgp_local_perf across ibgp routes
#            bgp_path.prepend(1659);
#            bgp_path.prepend(17717);
#            accept;
#        };
#        export none;
#    };
#}

protocol static static_rr {
    route 2a06:a005:210::55:4/128 unreachable;
    ipv6 {
        import filter {
            bgp_large_community.add((PUB_COMMUNITY,2,0));    # do not send to ebgp
            bgp_large_community.add((PUB_COMMUNITY,1,0));    # do not send to ibgp
            accept;
        };
        export none;
    };
}
