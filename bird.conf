include "/etc/bird/vars.conf";
include "../neighbor.conf";

protocol device {
    scan time 10;
}

protocol kernel {
    scan time 20;
    learn on;
    ipv4 {
        import none;
        export filter {
            if bgp_large_community ~ [(PUB_COMMUNITY, 3,*)] then reject;                  # Implement (asn, 3,*)   do not send to kernel
            if bgp_large_community ~ [(PUB_COMMUNITY, 4,*)] then dest = RTD_UNREACHABLE;  # Implement (asn, 4,*)   send to kernel but mark unreachable
            if bgp_large_community ~ [(PUB_COMMUNITY, 5,*)] then dest = RTD_BLACKHOLE;    # Implement (asn, 5,*)   send to kernel but mark blackhole
            kernel_route_hack();
            accept;
        };
    };
};

protocol kernel {
    scan time 20;
    learn on;
    ipv6 {
        import none;
        export filter {
            if net ~ allowed_prefix_v6_all then {
                krt_prefsrc = PUB_IPv6_kernel;
            }
            if net = 2000::/3 then {
                krt_prefsrc = PUB_IPv6_kernel;
            }
            if bgp_large_community ~ [(PUB_COMMUNITY, 3,*)] then reject;                  # Implement (asn, 3,*)   do not send to kernel
            if bgp_large_community ~ [(PUB_COMMUNITY, 4,*)] then dest = RTD_UNREACHABLE;  # Implement (asn, 4,*)   send to kernel but mark unreachable
            if bgp_large_community ~ [(PUB_COMMUNITY, 5,*)] then dest = RTD_BLACKHOLE;    # Implement (asn, 5,*)   send to kernel but mark blackhole
            kernel_route_hack();
            if (source = RTS_BGP && bgp_path.len != 0 && bgp_path.last != PUB_MYASN && gw = PUB_DEFAULT_GW && ifname = PUB_DEFAULT_IF) then reject;
            accept;
        };
    };
};

protocol static static_pub_default_v6 {
    route 2000::/3 via PUB_DEFAULT_GW % 'lo' onlink;
    ipv6 {
        import filter {
            if PUB_DEFAULT_IF = "do-not-exist" then {
                reject;
            }
            ifname = PUB_DEFAULT_IF;
            onlink = true;
            gw = PUB_DEFAULT_GW;
            bgp_large_community.add((PUB_COMMUNITY,1000,0));
            bgp_large_community.add((PUB_COMMUNITY,1,0));
            bgp_large_community.add((PUB_COMMUNITY,2,0));
            accept;
        };
        export none;
    };
}

template bgp pubebgp4 {
    local as PUB_MYASN;
    path metric 1;
    interpret communities on;
    enforce first as on;

    ipv4 {
        import none;
        export none;
    };
};
template bgp pubebgp6 {
    local as PUB_MYASN;
    path metric 1;
    interpret communities on;
    enforce first as on;

    ipv6 {
        import none;
        export none;
        import keep filtered on;
        import limit 999 action block;
        export limit 999 action block;
    };
};

template bgp pubibgp {
    local as PUB_MYASN;
    path metric 1;
    interpret communities off;
    allow local as;
    ipv6 {
        next hop self yes;
        add paths rx;
        import where ibgp_import();
        export where ibgp_export();
        import limit 10000000 action block;
    };
};

include "static/*.conf";
include "ospf/*.conf";
include "pubpeers/down_prefix/*.conf";
include "pubpeers/*.conf";
