include "predefined.conf";

#  MY_COMMUNITY = 207705
#
# Internal Community:
#  (MY_COMMUNITY,<999, 0)  Community for all my node
#  (MY_COMMUNITY,<999, 1)  Community only for this node
#  (MY_COMMUNITY,   1,*)   do not send to ibgp
#  (MY_COMMUNITY,   2,*)   do not send to ebgp
#  (MY_COMMUNITY,   3,*)   do not send to kernel
#  (MY_COMMUNITY, 101,*)   allow bgp_local_perf
#  (MY_COMMUNITY, 201,*)   transit routes
#  (MY_COMMUNITY, 202,*)   peer routes
#  (MY_COMMUNITY, 203,*)   customer routes
#  (MY_COMMUNITY, 204,*)   ibgp routes
#
# Control Community:
#   Actions:
#    _ = 0   do not announce to target
#    _ = 1   prepend 1 to target
#    _ = 2   prepend 2 to target
#    _ = 4   prepend 4 to target
#    _ = 8   prepend 8 to target
#   Action target selector:
#    _ = Action target selector
#    (MY_COMMUNITY,1_00,0)            Do action to everyone
#    (MY_COMMUNITY,1_01,asn)          Don't do action to this one
#    (MY_COMMUNITY,1_02,asn)          Do action to this one
#    (MY_COMMUNITY,1_10,0)            Do action to every region
#    (MY_COMMUNITY,1_11,region_code)  Don't do action to this region
#    (MY_COMMUNITY,1_12,region_code)  Do action to this region
#    (MY_COMMUNITY,1_20,0)            Do action to every country
#    (MY_COMMUNITY,1_21,country_code) Don't do action to this country
#    (MY_COMMUNITY,1_22,country_code) Do action to this country
#   Examples:
#    prepend 11 to AS6939: [(207705,1012,6939),(207705,1022,6939),(207705,1082,6939)]
#    prepend 1 to everyone but 6939: [(207705,1110,6939),(207705,1112,6939)]
#    do not announce to everyone: [(207705,1000,0)]
#
# Informational Community
#  (MY_COMMUNITY,10000,region_code)    Received from region
#  (MY_COMMUNITY,10001,country_code)   Received from country


function delete_last(int lastval){
    bgp_large_community.delete([(MY_COMMUNITY,  1, lastval),
                                (MY_COMMUNITY,  2, lastval),
                                (MY_COMMUNITY,  3, lastval),
                                (MY_COMMUNITY,101, lastval),
                                (MY_COMMUNITY,201, lastval),
                                (MY_COMMUNITY,202, lastval),
                                (MY_COMMUNITY,203, lastval),
                                (MY_COMMUNITY,204, lastval)]);
}

function add_type(string peer_type)
int neighbor_asn;
{
    if !(peer_type = "upstream" || peer_type="peer" || peer_type="downstream" || peer_type="ibgp" || peer_type="grc") then {
        print "bgp_import: unknown peer_type:", peer_type;
        reject;
    }
    if bgp_path.len > 0 then{
        neighbor_asn = bgp_path.first;
    } else {
        neighbor_asn = OWNAS;
    }

    if peer_type = "upstream" then {
        bgp_local_pref=100;
        bgp_large_community.add((MY_COMMUNITY, 201 ,0));
    } else if peer_type = "peer" then {
        bgp_local_pref=200;
        bgp_large_community.add((MY_COMMUNITY, 202 ,0));
        if neighbor_asn !~ t1_asns && bgp_path ~ t1_asns then reject; # accepts t1_asns only if the neighbor is t1 
    } else if peer_type = "downstream" then {
        bgp_local_pref=300;
        bgp_large_community.add((MY_COMMUNITY, 203 ,0));
        if bgp_path ~ t1_asns then reject;
    } else if peer_type = "ibgp" then {
        bgp_large_community.add((MY_COMMUNITY, 204 ,1));
    } else if peer_type = "grc" then {
        reject;
    }
}

function type_filter(int peer_asn; string peer_type) {
    if !(peer_type = "upstream" || peer_type="peer" || peer_type="downstream" || peer_type="grc" || peer_type="ibgp") then {
        print "bgp_import: invalid peer_type";
        reject;
    }
    if peer_type = "upstream" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no peer routes
        if bgp_path ~ t1_asns then reject;
    } else if peer_type = "peer" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no peer routes
        if bgp_path ~ t1_asns then reject;
    } else if peer_type = "downstream" then {
        # export all routes to downstream
    } else if peer_type = "ibgp" then {
        # export all routes to ibgp
    } else if peer_type = "grc" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_path ~ t1_asns then reject;
    }
}

function should_do_action (int action_base; int peer_asn)
int action_to_all_asn;
int action_not_to_asn;
int action_to_asn;
int action_to_all_region;
int action_not_to_region;
int action_to_region;
int action_to_all_country;
int action_not_to_country;
int action_to_country;
{
    action_to_all_asn     = action_base;
    action_not_to_asn     = action_base + 1;
    action_to_asn         = action_base + 2;
    action_to_all_region  = action_base + 10;
    action_not_to_region  = action_base + 11;
    action_to_region      = action_base + 12;
    action_to_all_country = action_base + 20;
    action_not_to_country = action_base + 21;
    action_to_country     = action_base + 22;
    if (MY_COMMUNITY, action_to_asn, peer_asn) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_asn, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_asn, peer_asn) !~ bgp_large_community )then {
        return true;
    }
    if (MY_COMMUNITY, action_to_region, MY_REGION) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_region, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_region, MY_REGION) !~ bgp_large_community )then {
        return true;
    }
    if (MY_COMMUNITY, action_to_country, MY_COUNTRY) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_country, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_country, MY_COUNTRY) !~ bgp_large_community )then {
        return true;
    }
    return false;
}

function do_control_action(int peer_asn){
    # Implement (MY_COMMUNITY,100_,0)   do not send to XXX
    if should_do_action(1000,peer_asn) then {
        reject;
    }
    # Implement (MY_COMMUNITY,101_,0)   prepend 1 to XXX
    if should_do_action(1010,peer_asn) then {
        bgp_path.prepend(OWNAS);
    }
    # Implement (MY_COMMUNITY,102_,0)   prepend 2 to XXX
    if should_do_action(1020,peer_asn) then {
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
    }
    # Implement (MY_COMMUNITY,104_,0)   prepend 4 to XXX
    if should_do_action(1040,peer_asn) then {
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
    }
    # Implement (MY_COMMUNITY,108_,0)   prepend 8 to XXX
    if should_do_action(1080,peer_asn) then {
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
        bgp_path.prepend(OWNAS);
    }
}

function path_whitelist(bgppath allowed_path)
{
    if delete(bgp_path,allowed_path).len > 0 then reject;
}

function net_whitelist(prefix set allowed_prefix)
{
    return net !~ allowed_prefix;
}

function ebgp_import(string peer_type){
    if is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) then reject;
    bgp_large_community.delete([(MY_COMMUNITY, 0..999, *)]);
    bgp_large_community.delete([(MY_COMMUNITY, 10000..99999, *)]);
    bgp_large_community.add((MY_COMMUNITY,10000,MY_REGION));
    bgp_large_community.add((MY_COMMUNITY,10001,MY_COUNTRY));
    add_type(peer_type);
    return true;
}

function ebgp_export(int peer_asn; string peer_type) {
    if is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) then reject;
    if source = RTS_OSPF then reject;
    type_filter(peer_asn, peer_type);
    # do_control_action(peer_asn);
    bgp_large_community.delete([(MY_COMMUNITY, 0..9999 , *)]);
    return true;
};

function rr_import() { 
    return true;
};
function rr_export() {
    if source = RTS_OSPF then reject;
    if net ~  2a0f:607:1072::55:2/128 then print source;
    delete_last(1);
    if bgp_large_community ~ [(MY_COMMUNITY,  1,*)] then reject;
    if bgp_large_community !~ [(MY_COMMUNITY,  101,*)] then bgp_local_pref=100;
    bgp_large_community.add((MY_COMMUNITY,10000,MY_REGION));
    bgp_large_community.add((MY_COMMUNITY,10001,MY_COUNTRY));
    return true;
};

function ibgp_import(int peer_region; int peer_country){
    return true;
}

function ibgp_export(int peer_region; int peer_country) {
    add_type("ibgp");
    if (bgp_large_community ~ [(MY_COMMUNITY,  201,*)] || bgp_path ~ t1_asns ) && (MY_COMMUNITY,10000,peer_region) !~bgp_large_community then reject; # reject transit routes from different region
    return true;
};
