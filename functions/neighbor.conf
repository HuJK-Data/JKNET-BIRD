include "predefined.conf";
include "regions.conf";
include "no_as_loop.conf";
include "rpki.conf";

# PUB_COMMUNITY = 207705
#
# Internal Community:
#  (PUB_COMMUNITY,<999, 0)  Community for all my node
#  (PUB_COMMUNITY,<999, 1)  Community only for this node
#  (PUB_COMMUNITY,   1,*)   do not send to ibgp
#  (PUB_COMMUNITY,   2,*)   do not send to ebgp
#  (PUB_COMMUNITY,   3,*)   do not send to kernel
#  (PUB_COMMUNITY,   4,*)   send to kernel but mark unreachable
#  (PUB_COMMUNITY,   5,*)   send to kernel but mark blackhole
#  (PUB_COMMUNITY, 101,*)   allow bgp_local_perf
#  (PUB_COMMUNITY, 201,*)   transit routes
#  (PUB_COMMUNITY, 202,*)   ixp rs routes
#  (PUB_COMMUNITY, 203,*)   peer routes
#  (PUB_COMMUNITY, 204,*)   customer routes
#  (PUB_COMMUNITY, 209,*)   ibgp routes
#
# Control Community:
#   Actions:
#    _ = 0   do not announce to target
#    _ = 1   prepend 1 to target
#    _ = 2   prepend 2 to target
#    _ = 4   prepend 4 to target
#    _ = 8   prepend 8 to target
#   Action target selector:
#    _ = Action
#    (PUB_COMMUNITY,1_00,0)            Do action to everyone
#    (PUB_COMMUNITY,1_01,asn)          Don't do action to this asn
#    (PUB_COMMUNITY,1_02,asn)          Do action to this asn
#    (PUB_COMMUNITY,1_10,0)            Do action to every region
#    (PUB_COMMUNITY,1_11,region_code)  Don't do action to this region
#    (PUB_COMMUNITY,1_12,region_code)  Do action to this region
#    (PUB_COMMUNITY,1019,0)            Disable (asn,1010,0), (asn,1011,local_region) as default value
#    (PUB_COMMUNITY,1_20,0)            Do action to every country
#    (PUB_COMMUNITY,1_21,country_code) Don't do action to this country
#    (PUB_COMMUNITY,1_22,country_code) Do action to this country
#    (PUB_COMMUNITY,1_30,1)            Do action to upstreams
#    (PUB_COMMUNITY,1_30,2)            Do action to ixp rs
#    (PUB_COMMUNITY,1_30,3)            Do action to peers
#    (PUB_COMMUNITY,1_30,4)            Do action to downstreams
#    (PUB_COMMUNITY,1_30,8)            Do action to route collector
#   Examples:
#    prepend 11 to AS6939: [(PUB_COMMUNITY,1102,6939),(PUB_COMMUNITY,1202,6939),(PUB_COMMUNITY,1802,6939)]
#    prepend 1 to everyone but 6939: [(PUB_COMMUNITY,1100,6939),(PUB_COMMUNITY,1101,6939)]
#    do not announce to anyone: [(PUB_COMMUNITY,1000,0)]
#
# Informational Community
#  (PUB_COMMUNITY,10000,region_code)    Received from region
#  (PUB_COMMUNITY,10001,country_code)   Received from country
# 
# Region code:
#  * 41: Europe
#  * 42: North America-E
#  * 43: North America-C
#  * 44: North America-W
#  * 45: Central America
#  * 46: South America-E
#  * 47: South America-W
#  * 48: Africa-N (above Sahara)
#  * 49: Africa-S (below Sahara)
#  * 50: Asia-S (IN,PK,BD)
#  * 51: Asia-SE (TH,SG,PH,ID,MY)
#  * 52: Asia-E (JP,CN,KR)
#  * 53: Pacific&Oceania (AU,NZ,FJ)
#  * 54: Antarctica
#  * 55: Asia-N (RU)
#  * 56: Asia-W (IR,TR,UAE)
#  * 57: Central Asia (AF,UZ,KZ)
#
# Country code:
#  ISO-3166 numeric-3 country code


function delete_last(int lastval){
    bgp_large_community.delete([(PUB_COMMUNITY,  1, lastval),
                                (PUB_COMMUNITY,  2, lastval),
                                (PUB_COMMUNITY,  3, lastval),
                                (PUB_COMMUNITY,  4, lastval),
                                (PUB_COMMUNITY,  5, lastval),
                                (PUB_COMMUNITY,101, lastval),
                                (PUB_COMMUNITY,201, lastval),
                                (PUB_COMMUNITY,202, lastval),
                                (PUB_COMMUNITY,203, lastval),
                                (PUB_COMMUNITY,204, lastval),
                                (PUB_COMMUNITY,209, lastval)]);
}

function add_geoinfo()
{
    bgp_large_community.add((PUB_COMMUNITY,10000,PUB_REGION));
    bgp_large_community.add((PUB_COMMUNITY,10001,PUB_COUNTRY));
    if (PUB_COMMUNITY,1019,0) !~ bgp_large_community then {
        bgp_large_community.add((PUB_COMMUNITY,1010,0));
        bgp_large_community.add((PUB_COMMUNITY,1011,PUB_REGION));
    }
}

function prepend_self_pow(int prepend_pow){
    if prepend_pow = 1 then {
        bgp_path.prepend(PUB_MYASN);
    }
    if prepend_pow = 2 then {
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
    }
    if prepend_pow = 4 then {
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
    }
    if prepend_pow = 8 then {
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
        bgp_path.prepend(PUB_MYASN);
    }
}

function prepend_self(int prepend_num){
    if prepend_num = 1 then {
        prepend_self_pow(1);
    }
    if prepend_num = 2 then {
        prepend_self_pow(2);
    }
    if prepend_num = 3 then {
        prepend_self_pow(1);
        prepend_self_pow(2);
    }
    if prepend_num = 4 then {
        prepend_self_pow(4);
    }
    if prepend_num = 5 then {
        prepend_self_pow(1);
        prepend_self_pow(4);
    }
    if prepend_num = 6 then {
        prepend_self_pow(2);
        prepend_self_pow(4);
    }
    if prepend_num = 7 then {
        prepend_self_pow(1);
        prepend_self_pow(2);
        prepend_self_pow(4);
    }
    if prepend_num = 8 then {
        prepend_self_pow(8);
    }
}


function add_type(string peer_type)
int neighbor_asn;
{
    if !(peer_type = "upstream" || peer_type="ixrs" || peer_type="peer" || peer_type="downstream" || peer_type="ibgp" || peer_type="grc") then {
        print "bgp_import: unknown peer_type:", peer_type;
        reject;
    }
    if bgp_path.len > 0 then{
        neighbor_asn = bgp_path.first;
    } else {
        neighbor_asn = PUB_MYASN;
    }

    if (peer_type = "upstream" || ( neighbor_asn ~ large_asns && ( peer_type = "ixrs" || peer_type = "peer" ))) then {
        bgp_local_pref=140;
        bgp_large_community.add((PUB_COMMUNITY, 201 ,0));
    } else if peer_type = "ixrs" then {
        bgp_local_pref=180;
        bgp_large_community.add((PUB_COMMUNITY, 202 ,0));
        if bgp_path ~ t1_asns then reject;                   # reject t1_asns
    } else if peer_type = "peer" then {
        bgp_local_pref=200;
        bgp_large_community.add((PUB_COMMUNITY, 203 ,0));
        if bgp_path ~ t1_asns then reject;                   # reject t1_asns
    } else if peer_type = "downstream" then {
        bgp_local_pref=300;
        bgp_large_community.add((PUB_COMMUNITY, 204 ,0));
        if bgp_path ~ t1_asns then reject;                   # reject t1_asns
        if !no_as_loop(false) then reject;
    } else if peer_type = "ibgp" then {
        bgp_large_community.add((PUB_COMMUNITY, 209 ,1));
    } else if peer_type = "grc" then {
        reject;
    }
}

function type_filter(int peer_asn; string peer_type) {
    if !(peer_type = "upstream" || peer_type="ixrs" || peer_type="peer" || peer_type="downstream" || peer_type="grc" || peer_type="ibgp") then {
        print "bgp_import: invalid peer_type";
        reject;
    }
    if peer_type = "upstream" then {
        if bgp_large_community ~ [(PUB_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(PUB_COMMUNITY,  202,*)] then reject;  # no ixrs routes
        if bgp_large_community ~ [(PUB_COMMUNITY,  203,*)] then reject;  # no peer routes
        if bgp_path ~ large_asns then reject;                              # reject T1 routes
        if bgp_large_community !~ [(PUB_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
    } else if peer_type = "ixrs" then {
        if bgp_large_community ~ [(PUB_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(PUB_COMMUNITY,  202,*)] then reject;  # no ixrs routes
        if bgp_large_community ~ [(PUB_COMMUNITY,  203,*)] then reject;  # no peer routes
        if bgp_path ~ large_asns then reject;                              # reject T1 routes
        if bgp_large_community !~ [(PUB_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
    } else if peer_type = "peer" then {
        if bgp_large_community ~ [(PUB_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(PUB_COMMUNITY,  202,*)] then reject;  # no ixrs routes
        if bgp_large_community ~ [(PUB_COMMUNITY,  203,*)] then reject;  # no peer routes
        if bgp_path ~ large_asns then reject;                              # reject T1 routes
        if bgp_large_community !~ [(PUB_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
    } else if peer_type = "downstream" then {
        # export all routes to downstream
    } else if peer_type = "ibgp" then {
        # export all routes to ibgp
    } else if peer_type = "grc" then {
        if bgp_large_community ~ [(PUB_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_path ~ t1_asns then reject;
    }
}

function should_do_action (int action_base; int peer_asn; string peer_type)
int action_to_all_asn;
int action_not_to_asn;
int action_to_asn;
int action_to_all_region;
int action_not_to_region;
int action_to_region;
int action_to_all_country;
int action_not_to_country;
int action_to_country;
int action_to_peer_type;
{
    action_to_all_asn     = action_base;
    action_not_to_asn     = action_base + 1;
    action_to_asn         = action_base + 2;
    action_to_all_region  = action_base + 10;
    action_not_to_region  = action_base + 11;
    action_to_region      = action_base + 12;
    action_to_all_country = action_base + 20;
    action_not_to_country = action_base + 21;
    action_to_country     = action_base + 22;
    action_to_peer_type   = action_base + 30;
    if (PUB_COMMUNITY, action_to_asn, peer_asn) ~ bgp_large_community || ( (PUB_COMMUNITY, action_to_all_asn, 0) ~ bgp_large_community && (PUB_COMMUNITY, action_not_to_asn, peer_asn) !~ bgp_large_community )then {
        return true;
    }
    if (PUB_COMMUNITY, action_to_region, PUB_REGION) ~ bgp_large_community || ( (PUB_COMMUNITY, action_to_all_region, 0) ~ bgp_large_community && (PUB_COMMUNITY, action_not_to_region, PUB_REGION) !~ bgp_large_community )then {
        if !(action_base = 1000 && peer_type = "downstream" ) then {
            return true; # reject on region is not valid on downstream session
        }
    }
    if (PUB_COMMUNITY, action_to_country, PUB_COUNTRY) ~ bgp_large_community || ( (PUB_COMMUNITY, action_to_all_country, 0) ~ bgp_large_community && (PUB_COMMUNITY, action_not_to_country, PUB_COUNTRY) !~ bgp_large_community )then {
        if !(action_base = 1000 && peer_type = "downstream" ) then {
            return true; # reject on country is not valid on downstream session
        }
    }
    if (PUB_COMMUNITY, action_to_peer_type, 1) ~ bgp_large_community && peer_type = "upstream"   then return true;
    if (PUB_COMMUNITY, action_to_peer_type, 2) ~ bgp_large_community && peer_type = "ixrs"       then return true;
    if (PUB_COMMUNITY, action_to_peer_type, 3) ~ bgp_large_community && peer_type = "peer"       then return true;
    if (PUB_COMMUNITY, action_to_peer_type, 4) ~ bgp_large_community && peer_type = "downstream" then return true;
    if (PUB_COMMUNITY, action_to_peer_type, 8) ~ bgp_large_community && peer_type = "grc"        then return true;
    return false;
}

function do_control_action(int peer_asn; string peer_type){
    # Implement (PUB_COMMUNITY,10__,0)   do not send to XXX
    if should_do_action(1000, peer_asn, peer_type) then {
        reject;
    }
    # Implement (PUB_COMMUNITY,11__,0)   prepend 1 to XXX
    if should_do_action(1100, peer_asn, peer_type) then {
        prepend_self(1);
    }
    # Implement (PUB_COMMUNITY,12__,0)   prepend 2 to XXX
    if should_do_action(1200, peer_asn, peer_type) then {
        prepend_self(2);
    }
    # Implement (PUB_COMMUNITY,14__,0)   prepend 4 to XXX
    if should_do_action(1400, peer_asn, peer_type) then {
        prepend_self(4);
    }
    # Implement (PUB_COMMUNITY,18__,0)   prepend 8 to XXX
    if should_do_action(1800, peer_asn, peer_type) then {
        prepend_self(8);
    }
}

function path_whitelist(int set allowed_path)
{
    if delete(bgp_path,allowed_path).len > 0 then reject;
}

function net_whitelist(prefix set prefix_whitelist)
{
    if net !~ prefix_whitelist then {
        print bgp_path.first, ": filtered ", net, "are not in prefix_whitelist";
        reject;
    }
}

function ebgp_import(int peer_asn; string peer_type; int prepend_num; prefix set prefix_whitelist; int set asn_whitelist){
    if is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) then reject;
    bgp_large_community.delete([(PUB_COMMUNITY, 0..999, *)]);
    bgp_large_community.delete([(PUB_COMMUNITY, 10000..99999, *)]);
    prepend_self(prepend_num);
    add_geoinfo();
    add_type(peer_type);
    net_whitelist(prefix_whitelist);
    do_rpki_check();
    if 0 !~ asn_whitelist then {
        path_whitelist(asn_whitelist);
    }
    return true;
}

function ebgp_export(int peer_asn; string peer_type; int prepend_num; prefix set prefix_whitelist;  int set asn_whitelist) {
    if is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) then reject;
    if source ~ [ RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2 ] then reject;
    if bgp_large_community ~ [(PUB_COMMUNITY,  2,*)] then reject;                          # Implement (asn, 2,*)   do not send to ebgp
    type_filter(peer_asn, peer_type);
    prepend_self(prepend_num);
    do_control_action(peer_asn, peer_type);
    bgp_large_community.delete([(PUB_COMMUNITY, 0..9999 , *)]);
    net_whitelist(prefix_whitelist);
    if 0 !~ asn_whitelist then {
        path_whitelist(asn_whitelist);
    }
    return true;
};

function ibgp_import() {
    ibgp_pref(); 
    return true;
};
function ibgp_export() {
    if source ~ [ RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2 ] then reject;
    delete_last(1);
    if bgp_large_community ~ [(PUB_COMMUNITY,  1,*)] then reject;                           # Implement (asn, 1,*)   do not send to ibgp
    if bgp_large_community !~ [(PUB_COMMUNITY,  101,*)] then {
        if bgp_large_community ~ [(PUB_COMMUNITY,  201,*)] then bgp_local_pref=140; # reset transit ibgp to 100
        if bgp_large_community ~ [(PUB_COMMUNITY,  202,*)] then bgp_local_pref=140; # reset ixrs to 100
        if bgp_large_community ~ [(PUB_COMMUNITY,  203,*)] then bgp_local_pref=140; # reset peer to 100
    }
    add_geoinfo();
    return true;
};

function rr_import(int peer_region; int peer_country){
    return true;
}

function rr_export(lc set transit_regions; lc set transit_countries) {
    add_type("ibgp");
    if (bgp_large_community ~ [(PUB_COMMUNITY,  201,*)] || bgp_path ~ large_asns ) then { # transit routes
        if !(bgp_large_community ~ transit_regions && bgp_large_community ~ transit_countries) then {
            reject;
        }
    }
    return true;
};
