define PUB_PADASN =         PUB_MYASN+4200000000;

define t1_asns = [ 701, 1239, 1299, 2914, 3257, 3320, 3356, 3491, 5511, 6453, 6461, 6762, 6830, 7018, 12956, 174, 1273, 2828, 4134, 4809, 4637, 6939, 7473, 7922, 9002 ];
define large_asns = [13335, 15169, 46489,16509, 8075, 20940,32787, 20473,49304,53667,36369,138997, 701, 1239, 1299, 2914, 3257, 3320, 3356, 3491, 5511, 6453, 6461, 6762, 6830, 7018, 12956, 174, 1273, 2828, 4134, 4809, 4637, 6939, 7473, 7922, 9002];

define allowed_prefix_v4 = [0.0.0.0/0{8,24}];
define allowed_prefix_v6 = [2000::/3{8,48}];
define prefix_all_v4 = allowed_prefix_v4;
define prefix_all_v6 = allowed_prefix_v6;

define bogon_prefix_v4 = [
    0.0.0.0/8+,         # RFC 1122 'this' network
    10.0.0.0/8+,        # RFC 1918 private space
    100.64.0.0/10+,     # RFC 6598 Carrier grade nat space
    127.0.0.0/8+,       # RFC 1122 localhost
    169.254.0.0/16+,    # RFC 3927 link local
    172.16.0.0/12+,     # RFC 1918 private space
    192.0.2.0/24+,      # RFC 5737 TEST-NET-1
    192.168.0.0/16+,    # RFC 1918 private space
    198.18.0.0/15+,     # RFC 2544 benchmarking
    198.51.100.0/24+,   # RFC 5737 TEST-NET-2
    203.0.113.0/24+,    # RFC 5737 TEST-NET-3
    224.0.0.0/4+,       # multicast
    240.0.0.0/4+        # reserved
];

define bogon_prefix_v6 =  [
    ::/8+,              # RFC 4291 IPv4-compatible, loopback, et al
    0100::/64+,         # RFC 6666 Discard-Only
    2001:2::/48+,       # RFC 5180 BMWG
    2001:10::/28+,      # RFC 4843 ORCHID
    2001:db8::/32+,     # RFC 3849 documentation
    3ffe::/16+,         # RFC 3701 old 6bone
    fc00::/7+,          # RFC 4193 unique local unicast
    fe80::/10+,         # RFC 4291 link local unicast
    fec0::/10+,         # RFC 3879 old site local unicast
    ff00::/8+           # RFC 4291 multicast
];

function is_bogon_prefix() {
    case net.type{
        NET_IP4: return net ~ bogon_prefix_v4;
        NET_IP6: return net ~ bogon_prefix_v6;
    }
}
function is_default() {
    case net.type{
        NET_IP4: return net ~ [ 0.0.0.0/0 ];
        NET_IP6: return net ~ [ ::/0 ];
    }
}

function not_allowed() {
    case net.type{
        NET_IP4: return net !~ allowed_prefix_v4;
        NET_IP6: return net !~ allowed_prefix_v6;
    }
}
